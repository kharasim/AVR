
Z1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000c8  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .debug_aranges 00000020  00000000  00000000  0000011c  2**0
                  CONTENTS, READONLY, DEBUGGING
  2 .debug_pubnames 0000002a  00000000  00000000  0000013c  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_info   0000011e  00000000  00000000  00000166  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_abbrev 000000b6  00000000  00000000  00000284  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_line   00000159  00000000  00000000  0000033a  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_frame  00000030  00000000  00000000  00000494  2**2
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_str    000000d1  00000000  00000000  000004c4  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    00000018  00000000  00000000  00000595  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__vector_1>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 36 00 	call	0x6c	; 0x6c <main>
  64:	0c 94 62 00 	jmp	0xc4	; 0xc4 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <main>:
#include <avr/interrupt.h>
#include <util/delay.h>

int main (void) 
{
    cli(); //wylaczenie przerwan
  6c:	f8 94       	cli
    DDRA = DDRA | 0b11110000;
  6e:	8a b3       	in	r24, 0x1a	; 26
  70:	80 6f       	ori	r24, 0xF0	; 240
  72:	8a bb       	out	0x1a, r24	; 26
	PORTA = PORTA^0b00001111;       //Ustawienie poczatkowe
  74:	8b b3       	in	r24, 0x1b	; 27
  76:	9f e0       	ldi	r25, 0x0F	; 15
  78:	89 27       	eor	r24, r25
  7a:	8b bb       	out	0x1b, r24	; 27
    //DDRB | = 0b0000000;             //
    DDRC = DDRC | 0b11111111;       //
  7c:	84 b3       	in	r24, 0x14	; 20
  7e:	8f ef       	ldi	r24, 0xFF	; 255
  80:	84 bb       	out	0x14, r24	; 20

//--------- Konfiguracja wejscia INT0 ---------//
    DDRD = DDRD & ~ (1<<PD2);       //Wyzerowanie bitu na PIND2 -> wejscie
  82:	8a 98       	cbi	0x11, 2	; 17
    PORTD |= (1<<PD2);              //rezystor pull-up na PIND2
  84:	92 9a       	sbi	0x12, 2	; 18

    MCUCR |= (1<<ISC01)|(1<<ISC00); //INT0 - zbocze narastajace
  86:	85 b7       	in	r24, 0x35	; 53
  88:	83 60       	ori	r24, 0x03	; 3
  8a:	85 bf       	out	0x35, r24	; 53
    GICR |= (1<<INT0);              //wylaczenie przerwania z INT0
  8c:	8b b7       	in	r24, 0x3b	; 59
  8e:	80 64       	ori	r24, 0x40	; 64
  90:	8b bf       	out	0x3b, r24	; 59
    sei();                          //globalne zezwolenie na przerwania
  92:	78 94       	sei
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
  94:	20 e2       	ldi	r18, 0x20	; 32
  96:	3e e4       	ldi	r19, 0x4E	; 78
  98:	c9 01       	movw	r24, r18
  9a:	01 97       	sbiw	r24, 0x01	; 1
  9c:	f1 f7       	brne	.-4      	; 0x9a <main+0x2e>
    while (1)
    {
        _delay_ms(20);
        PORTC = PORTC ^ 0b11111111;
  9e:	85 b3       	in	r24, 0x15	; 21
  a0:	80 95       	com	r24
  a2:	85 bb       	out	0x15, r24	; 21
  a4:	f9 cf       	rjmp	.-14     	; 0x98 <main+0x2c>

000000a6 <__vector_1>:
    }
}

ISR(INT0_vect)
{
  a6:	1f 92       	push	r1
  a8:	0f 92       	push	r0
  aa:	0f b6       	in	r0, 0x3f	; 63
  ac:	0f 92       	push	r0
  ae:	11 24       	eor	r1, r1
  b0:	8f 93       	push	r24
    PORTA = PORTA^0b11111111; //
  b2:	8b b3       	in	r24, 0x1b	; 27
  b4:	80 95       	com	r24
  b6:	8b bb       	out	0x1b, r24	; 27
    // PORTD ^= 0b10000000
}
  b8:	8f 91       	pop	r24
  ba:	0f 90       	pop	r0
  bc:	0f be       	out	0x3f, r0	; 63
  be:	0f 90       	pop	r0
  c0:	1f 90       	pop	r1
  c2:	18 95       	reti

000000c4 <_exit>:
  c4:	f8 94       	cli

000000c6 <__stop_program>:
  c6:	ff cf       	rjmp	.-2      	; 0xc6 <__stop_program>
